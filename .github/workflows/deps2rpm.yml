name: Build gRPC+Boost .rpms

on:
  workflow_dispatch:

env:
  GRPC_VER: 1.54.1
  BOOST_VER: 1.85.0
  E2SAR_VER: 0.1.5

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: ["rockylinux/rockylinux:9.0", "rockylinux/rockylinux:9.5"]
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Set up environment
        run: |
          dnf -yq install epel-release
          dnf -yq --enablerepo=devel update
          dnf -yq --enablerepo=devel install gcc gcc-c++ kernel-devel make
          dnf -yq --enablerepo=devel install python3-pip autoconf cmake libtool pkg-config ninja-build openssl protobuf-compiler glib2-devel re2-devel libquadmath-devel python3-devel python3
          dnf -yq install git wget
          dnf -yq install ruby-devel gcc make rpm-build libffi-devel
          gem install fpm

      - name: Set up authentication for HTTPS
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"  # Force HTTPS to use PAT

      - name: Create install directories
        run: |
          mkdir -p package/usr/local/include/
          mkdir -p package/usr/local/lib
          mkdir -p package/usr/local/lib64
      
      - name: Prepare a unique name for Artifacts
        id: prep_artifact_name
        run: |
          # Calculate a unique string which applies to the matrix entry
          # that we can use to construct unique and valid artifact names.
          # We achieve that by squashing runs of characters are invalid
          # in artifact names, and also whitespace and dashes, into a
          # single dash character.  The unique string will appear as
          # the environment variable ARTIFACT_NAME in subsequent actions.
          
          name="${{ matrix.container }}"
          # The option to enable + in sed regexps differs by OS so we avoid it
          name=$(echo -n "$name" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - name: Download built boost and grpc artifact
        if: steps.cache.outputs.cache-hit != 'true'  # Only run if cache wasn't hit
        id: download-artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: buildRockyDeps.yml
          name: ${{ env.ARTIFACT_NAME }}-package-e2sar-deps-${{ env.E2SAR_VER }}
          path: ./

      - name: Untar the grpc and boost install tree
        run: |
          tar -zxf package-e2sar-deps-${{ env.E2SAR_VER }}.tar.gz
          ls -l package/usr/local/bin

      - name: Update pkgconfig prefix files for final installation
        run: |
          # update pkgconfig files for the install location. DESTDIR didn't work
          export IDIR=`pwd`/package/usr/local
          echo Updating pkgconfig files prefix from ${IDIR} to ${{ env.FINAL_INSTALL }}
          for file in `ls -1 ${IDIR}/lib/pkgconfig`; do sed -i "s|${IDIR}|${{ env.FINAL_INSTALL }}|g" ${IDIR}/lib/pkgconfig/${file}; done

      - name: Package into .deb or .rpm
        run: |
          pushd package/ && tar -zcf ../e2sar-deps.tar.gz usr/ && popd
          fpm -s tar -t rpm -n e2sar-deps -v ${{ env.E2SAR_VER }} --prefix=/ e2sar-deps.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-e2sar-deps-${{ env.E2SAR_VER }}-package
          path: |
            *.deb
            *.rpm
    
