name: Build E2SAR .deb and .rpms

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Set up environment
        run: |
          if [[ ${{ matrix.os }} == *"ubuntu"* ]]; then
            sudo apt-get update
            sudo apt-get install python3-pip build-essential autoconf cmake libtool pkg-config libglib2.0-dev ninja-build openssl libssl-dev libsystemd-dev protobuf-compiler libre2-dev 
            pip3 install meson pybind11
          elif [[ ${{ matrix.os }} == *"rocky"* ]]; then
            sudo dnf -yq install epel-release
            sudo dnf -yq --enablerepo=devel update
            sudo dnf -yq --enablerepo=devel install gcc gcc-c++ kernel-devel make
            sudo dnf -yq --enablerepo=devel install python3-pip autoconf cmake libtool pkg-config ninja-build openssl protobuf-compiler glib2-devel re2-devel libquadmath-devel python39-devel python39
            sudo update-alternatives --set python /usr/bin/python3.9
            sudo update-alternatives --set python3 /usr/bin/python3.9
            pip3 install meson pybind11
          fi
          
      - name: Checkout E2SAR code
        uses: actions/checkout@v3
        with:
          path: E2SAR
          submodules: true  
          token: ${{ secrets.PRIVATE_REPO_PAT }}

      - name: Create install directories
        run: |
          mkdir -p package/usr/local/include/
          mkdir -p package/usr/local/lib
          mkdir -p package/usr/local/lib64

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: package/usr/local 
          key: ${{ runner.os }}-dependencies-cache-grpc-1.54.1-boost-1.85.0  
          restore-keys: |
            ${{ runner.os }}-dependencies-cache-grpc-1.54.1-boost-1.85.0 
            
      - name: Checkout gRPC
        if: steps.cache.outputs.cache-hit != 'true' 
        uses: actions/checkout@v3
        with:
          repository: grpc/grpc  
          path: grpc  
          ref: v1.54.1
          submodules: true  

      - name: Build grpc
        if: steps.cache.outputs.cache-hit != 'true' 
        run: |
          export IDIR=`pwd`/package/usr/local
          cd grpc
          mkdir -p cmake/build
          pushd cmake/build
          cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=${IDIR} -DBUILD_SHARED_LIBS=ON ../..
          make -j 4
          make install

      - name: Download and build boost
        if: steps.cache.outputs.cache-hit != 'true' 
        run: |
          export IDIR=`pwd`/package/usr/local
          wget https://archives.boost.io/release/1.85.0/source/boost_1_85_0.tar.gz
          tar -zxf boost_1_85_0.tar.gz
          cd boost_1_85_0
          ./bootstrap.sh
          ./b2
          ./b2 install --prefix=${IDIR}

      - name: Build E2SAR using Meson
        run: |
          export IDIR=`pwd`/package/usr/local
          cd E2SAR
          BOOST_ROOT=${IDIR} PATH=${IDIR}/bin:$PATH LD_LIBRARY_PATH=${IDIR}/lib meson setup -Dpkg_config_path=${IDIR}/lib/pkgconfig/:${IDIR}/lib64/pkgconfig/ --prefix ${IDIR} build && sed -i 's/-std=c++11//g' build/build.ninja
          meson compile -C build
          meson install -C build

      - name: Package project into .deb or .rpm
        run: |
          if [[ ${{ matrix.os }} == *"ubuntu"* ]]; then
            fpm -s dir -t deb -n e2sar -v 1.0 --prefix=/usr/local package/
          elif [[ ${{ matrix.os }} == *"rocky"* ]]; then
            fpm -s dir -t rpm -n e2sar -v 1.0 --prefix=/usr/local package/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-package
          path: "*.deb, *.rpm"
